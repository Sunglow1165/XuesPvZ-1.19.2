// 插件
plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
}

apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "architectury-plugin"
apply plugin: "dev.architectury.loom"

// 项目配置
archivesBaseName = rootProject.archives_base_name
version = rootProject.mod_version
group = rootProject.maven_group

// Architectury插件的配置
architectury {
    minecraft = rootProject.minecraft_version
    common(rootProject.enabled_platforms.split(","))
    platformSetupLoomIde()
    forge()
}

// Loom插件的配置
loom {
    accessWidenerPath = file("src/main/resources/creeperoverhaul.accesswidener")
    silentMojangMappingsLicense()
}

// 依赖
dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    modImplementation "software.bernie.geckolib:${rootProject.gecko_lib_forge_version}"
    modApi "com.teamresourceful.resourcefulconfig:resourcefulconfig-forge-$rootProject.minecraft_version:$rootProject.resourcefulconfig_version"
    mappings loom.officialMojangMappings()
}

// 依赖远程仓库
repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url "https://maven.terraformersmc.com" }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url = "https://nexus.resourcefulbees.com/repository/maven-public/" }
}

// 项目发布的配置
publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
    }
}

// 针对所有的Java编译任务（JavaCompile）进行配置
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release.set(17)
}

// 表示在生成Jar文件的同时，还会生成带有源代码的Jar文件，这通常用于开源项目的发布
java {
    withSourcesJar()
}